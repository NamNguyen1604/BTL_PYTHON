import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

class TriviaGame:
    def __init__(self, root):
        self.root = root
        self.root.title("üßê Trivia Challenge")
        self.skip_empty_warning = False  # ƒê√°nh d·∫•u ƒë√£ c·∫£nh b√°o ch∆∞a

        # Load ·∫£nh n·ªÅn
        try:
            self.bg_image = Image.open("background.png")
            self.bg_photo = ImageTk.PhotoImage(self.bg_image)
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file background.png.")
            self.root.destroy()
            return

        self.canvas = tk.Canvas(root, width=self.bg_image.width, height=self.bg_image.height)
        self.canvas.pack()
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.bg_photo)

        self.center_x = self.bg_image.width // 2
        self.center_y = self.bg_image.height // 2

        # Load c√¢u h·ªèi
        self.questions = self.load_questions("trivia.txt")
        self.score = 0
        self.question_index = 0

        # Giao di·ªán b·∫Øt ƒë·∫ßu
        self.start_button = tk.Button(root, text="üéÆ B·∫Øt ƒë·∫ßu ch∆°i", font=("Arial", 16, "bold"),
                                      bg="#4CAF50", fg="white", command=self.start_game)
        self.start_window = self.canvas.create_window(self.center_x, self.center_y, window=self.start_button)

    def load_questions(self, filename):
        questions = []
        try:
            with open(filename, "r", encoding="utf-8") as file:
                for line in file:
                    if '|' in line:
                        q, a = line.strip().split("|")
                        questions.append((q.strip(), a.strip()))
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file trivia.txt.")
            self.root.destroy()
        return questions

    def start_game(self):
        # Reset
        self.score = 0
        self.question_index = 0
        self.skip_empty_warning = False
        self.questions = self.load_questions("trivia.txt")

        # Xo√° m·ªçi th·ª© c≈©
        self.canvas.delete("all")
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.bg_photo)

        # C√°c th√†nh ph·∫ßn ch√≠nh
        self.question_label = self.canvas.create_text(
            self.center_x, 100, text="", font=("Arial", 20, "bold"), fill="black", width=600
        )

        self.answer_entry = tk.Entry(self.root, font=("Arial", 16))
        self.entry_window = self.canvas.create_window(self.center_x, 160, window=self.answer_entry, width=300)

        self.submit_button = tk.Button(self.root, text="Tr·∫£ l·ªùi", font=("Arial", 14),
                                       bg="#2196F3", fg="white", command=self.check_answer)
        self.submit_window = self.canvas.create_window(self.center_x, 210, window=self.submit_button)

        self.score_label = self.canvas.create_text(
            self.center_x, 50, text="üåü ƒêi·ªÉm: 0", font=("Arial", 16, "bold"), fill="blue"
        )

        self.end_button = tk.Button(self.root, text="Tho√°t", font=("Arial", 12),
                                    bg="gray", fg="white", command=self.root.destroy)
        self.end_window = self.canvas.create_window(self.center_x, 260, window=self.end_button)

        self.load_next_question()

        self.root.bind("<Return>", lambda event: self.check_answer())
        self.root.bind("<Escape>", lambda event: self.root.destroy())

    def load_next_question(self):
        if self.question_index < len(self.questions):
            q_text = f"C√¢u {self.question_index + 1}: {self.questions[self.question_index][0]}"
            self.canvas.itemconfig(self.question_label, text=q_text)
        else:
            self.show_result()

    def check_answer(self):
        user_ans = self.answer_entry.get().strip()
        correct_ans = self.questions[self.question_index][1]

        if user_ans == "":
            if not self.skip_empty_warning:
                messagebox.showwarning("Ch∆∞a nh·∫≠p ƒë√°p √°n", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√°p √°n tr∆∞·ªõc khi ti·∫øp t·ª•c.")
                self.skip_empty_warning = True
                return  # Kh√¥ng chuy·ªÉn ti·∫øp ngay l·∫ßn ƒë·∫ßu
            # N·∫øu ƒë√£ c·∫£nh b√°o tr∆∞·ªõc ƒë√≥, cho qua v√† chuy·ªÉn ti·∫øp nh∆∞ sai
            messagebox.showinfo("B·ªè qua", f"B·∫°n ƒë√£ b·ªè qua c√¢u n√†y. ƒê√°p √°n ƒë√∫ng l√†: {correct_ans}")
        elif user_ans.lower() == correct_ans.lower():
            self.score += 1
            messagebox.showinfo("üéâ ƒê√∫ng r·ªìi!", "B·∫°n ƒë√£ tr·∫£ l·ªùi ch√≠nh x√°c!")
        else:
            messagebox.showwarning("‚ùå Sai r·ªìi!", f"ƒê√°p √°n ƒë√∫ng l√†: {correct_ans}")

        self.answer_entry.delete(0, tk.END)
        self.question_index += 1
        self.skip_empty_warning = False  # Reset cho c√¢u ti·∫øp theo
        self.canvas.itemconfig(self.score_label, text=f"üåü ƒêi·ªÉm: {self.score}")
        self.load_next_question()

    def show_result(self):
        self.canvas.delete(self.question_label)
        self.canvas.delete(self.entry_window)
        self.canvas.delete(self.submit_window)
        self.canvas.delete(self.end_window)
        self.canvas.delete(self.score_label)

        self.canvas.create_text(
            self.center_x, self.center_y - 30,
            text=f"üéâ Tr√≤ ch∆°i k·∫øt th√∫c!\nB·∫°n ghi ƒë∆∞·ª£c {self.score} ƒëi·ªÉm üåü.",
            font=("Arial", 22, "bold"),
            fill="darkgreen",
            justify="center"
        )

        self.retry_button = tk.Button(self.root, text="üîÅ Ch∆°i l·∫°i", font=("Arial", 14, "bold"),
                                      bg="#f57c00", fg="white", command=self.start_game)
        self.retry_window = self.canvas.create_window(self.center_x, self.center_y + 50, window=self.retry_button)

# Kh·ªüi ch·∫°y
if __name__ == "__main__":
    root = tk.Tk()
    app = TriviaGame(root)
    root.mainloop()